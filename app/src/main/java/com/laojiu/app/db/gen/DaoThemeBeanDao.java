package com.laojiu.app.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.laojiu.app.bean.StemBean_Converter;
import java.util.List;

import com.laojiu.app.bean.DaoThemeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAO_THEME_BEAN".
*/
public class DaoThemeBeanDao extends AbstractDao<DaoThemeBean, Long> {

    public static final String TABLENAME = "DAO_THEME_BEAN";

    /**
     * Properties of entity DaoThemeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TagID = new Property(1, Long.class, "tagID", false, "TAG_ID");
        public final static Property Theme = new Property(2, String.class, "theme", false, "THEME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property StemBeanList = new Property(4, String.class, "stemBeanList", false, "STEM_BEAN_LIST");
    }

    private final StemBean_Converter stemBeanListConverter = new StemBean_Converter();

    public DaoThemeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DaoThemeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAO_THEME_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TAG_ID\" INTEGER," + // 1: tagID
                "\"THEME\" TEXT," + // 2: theme
                "\"TYPE\" TEXT," + // 3: type
                "\"STEM_BEAN_LIST\" TEXT);"); // 4: stemBeanList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAO_THEME_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DaoThemeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tagID = entity.getTagID();
        if (tagID != null) {
            stmt.bindLong(2, tagID);
        }
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(3, theme);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        List stemBeanList = entity.getStemBeanList();
        if (stemBeanList != null) {
            stmt.bindString(5, stemBeanListConverter.convertToDatabaseValue(stemBeanList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DaoThemeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tagID = entity.getTagID();
        if (tagID != null) {
            stmt.bindLong(2, tagID);
        }
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(3, theme);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        List stemBeanList = entity.getStemBeanList();
        if (stemBeanList != null) {
            stmt.bindString(5, stemBeanListConverter.convertToDatabaseValue(stemBeanList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DaoThemeBean readEntity(Cursor cursor, int offset) {
        DaoThemeBean entity = new DaoThemeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tagID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // theme
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : stemBeanListConverter.convertToEntityProperty(cursor.getString(offset + 4)) // stemBeanList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DaoThemeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTagID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTheme(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStemBeanList(cursor.isNull(offset + 4) ? null : stemBeanListConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DaoThemeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DaoThemeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DaoThemeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
